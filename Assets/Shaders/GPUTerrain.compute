#pragma kernel TraverseQuadTree
#pragma kernel BuildPatches

#define PATCH_COUNT_PER_NODE 8

struct NodeDescriptor{
    uint branch;
};

struct RenderPatch{
    float2 position;
    float2 minMaxHeight;
    uint lod;
    //uint4 lodTrans;
};

struct Bound{
    float3 min;
    float3 max;
};

Texture2D<float4> _MinMaxHeightTexture;

ConsumeStructuredBuffer<uint2> _NodeListA;
AppendStructuredBuffer<uint2> _NodeListB;
AppendStructuredBuffer<uint3> _FinalNodeList;
RWStructuredBuffer<NodeDescriptor> _NodeDescriptors;
AppendStructuredBuffer<RenderPatch> _CulledPatchList;
StructuredBuffer<uint3> _RenderNodeList;

uniform uint _LodLevel;
uniform float3 _CameraPosWS;
uniform float3 _WorldSize;
uniform int _BoundsHeightRedundance;

//x为nodeSize(m)
//y等于nodeSize/16
//z等于worldSize/nodeSize
//w等于2^lodLevel
uniform float4 _NodeParams[6];

uniform uint _NodeIDOffsets[6];

uniform float4 _CameraFrustumPlanes[6];

float3 GetNodePositionWS(uint2 node){
    float nodeMeterSize = _NodeParams[_LodLevel].x;
    float nodeCount = _NodeParams[_LodLevel].z;
    float2 nodePosWS = ((float2)node - (nodeCount - 1) * 0.5) * nodeMeterSize;
    float2 minMaxHeight = _MinMaxHeightTexture.mips[_LodLevel][node].xy;
    float y = (minMaxHeight.x + minMaxHeight.y) * 0.5 * _WorldSize.y;
    return float3(nodePosWS.x, y, nodePosWS.y);
}

bool EvaluateNode(uint2 node){
    float3 nodePosWS = GetNodePositionWS(node);
    float3 dv = _CameraPosWS - nodePosWS;
    float distance2 = dv.x*dv.x + dv.y*dv.y + dv.z*dv.z;
    float nodeSize = _NodeParams[_LodLevel].x;
    float f2 = distance2 / (nodeSize * nodeSize * 1.44);
    if(f2 < 1){
        return true;
    }
    return false;
}

uint GetNodeID(uint2 node){
    return _NodeIDOffsets[_LodLevel] + node.y * _NodeParams[_LodLevel].z + node.x;
}

[numthreads(1, 1, 1)]
void TraverseQuadTree(uint3 id : SV_DispatchThreadID)
{
    uint2 node = _NodeListA.Consume();
    uint nodeID = GetNodeID(node);
    NodeDescriptor desc = _NodeDescriptors[nodeID];
    if(_LodLevel > 0 && EvaluateNode(node)){
        _NodeListB.Append(node * 2);
        _NodeListB.Append(node * 2 + uint2(1,0));
        _NodeListB.Append(node * 2 + uint2(0,1));
        _NodeListB.Append(node * 2 + uint2(1,1));
        desc.branch = 1;
    }else{
        _FinalNodeList.Append(uint3(node, _LodLevel));
        desc.branch = 0;
    }
    _NodeDescriptors[nodeID] = desc;
}

float2 GetNodePositionWS2(uint2 node,uint mip){
    float nodeMeterSize = _NodeParams[mip].x;
    float nodeCount = _NodeParams[mip].z;
    float2 nodePositionWS = ((float2)node - (nodeCount-1)*0.5) * nodeMeterSize;
    return nodePositionWS;
}

RenderPatch CreatePatch(uint3 node, uint2 patchOffset){
    uint lod = node.z;
    float nodeMeterSize = _NodeParams[lod].x;
    float patchMeterSize = nodeMeterSize / PATCH_COUNT_PER_NODE;
    float2 nodePositionWS = GetNodePositionWS2(node.xy, lod);
    uint2 patchLoc = node.xy * PATCH_COUNT_PER_NODE + patchOffset;
    float2 minMaxHeight = _MinMaxHeightTexture.mips[lod][patchLoc].rg * _WorldSize.y 
        + float2(-_BoundsHeightRedundance, _BoundsHeightRedundance);

    RenderPatch patch;
    patch.lod = lod;
    patch.position = nodePositionWS + (patchOffset - (PATCH_COUNT_PER_NODE - 1) * 0.5) * patchMeterSize;
    patch.minMaxHeight = minMaxHeight;
    return patch;
}

Bound GetBound(RenderPatch patch){
    float halfSize = _NodeParams[patch.lod].y;
    Bound bound;
    float3 min, max;
    min.xz = patch.position - halfSize;
    max.xz = patch.position + halfSize;
    min.y = patch.minMaxHeight.x;
    max.y = patch.minMaxHeight.y;

    bound.min = min;
    bound.max = max;
    return bound;
}

bool PlaneTest(float4 plane,float3 position){
    return dot(plane.xyz, position) + plane.w < 0; 
}

bool BoundPlaneTest(float4 plane, Bound bound){
    return PlaneTest(plane, bound.min) &&
           PlaneTest(plane, bound.max) &&
           PlaneTest(plane, float3(bound.min.x, bound.min.y, bound.max.z)) &&
           PlaneTest(plane, float3(bound.min.x, bound.max.y, bound.min.z)) &&
           PlaneTest(plane, float3(bound.min.x, bound.max.y, bound.max.z)) &&
           PlaneTest(plane, float3(bound.max.x, bound.min.y, bound.max.z)) &&
           PlaneTest(plane, float3(bound.max.x, bound.max.y, bound.min.z)) &&
           PlaneTest(plane, float3(bound.max.x, bound.min.y, bound.min.z));
}

bool FrustumCull(float4 planes[6], Bound bound){
    return BoundPlaneTest(planes[0], bound) || 
           BoundPlaneTest(planes[1], bound) || 
           BoundPlaneTest(planes[2], bound) || 
           BoundPlaneTest(planes[3], bound) || 
           BoundPlaneTest(planes[4], bound) || 
           BoundPlaneTest(planes[5], bound);
}

[numthreads(8,8,1)]
void BuildPatches(uint3 id : SV_DispatchThreadID, uint3 groupId:SV_GroupID, uint3 groupThreadId:SV_GroupThreadID){
    uint3 node = _RenderNodeList[groupId.x];
    uint2 patchOffset = groupThreadId.xy;
    RenderPatch patch = CreatePatch(node, patchOffset);

    Bound bound = GetBound(patch);
    
    if(FrustumCull(_CameraFrustumPlanes, bound)){
        return;
    }

    _CulledPatchList.Append(patch);
}
