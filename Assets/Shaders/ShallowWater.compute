#pragma kernel MixHeight
#pragma kernel Update

RWTexture2D<float> _HeightTexture1;
RWTexture2D<float> _HeightTexture2;
RWTexture2D<float> _HeightTexture;

RWTexture2D<float> _ObjectHeightMap;

uniform float _Damping;
uniform float _Alpha;
uniform float _Beta;

uniform float _WaterHeight;

#pragma enable_d3d11_debug_symbols
[numthreads(8,8,1)]
void MixHeight(uint2 id : SV_DispatchThreadID)
{
    _HeightTexture[id.xy] += max(_ObjectHeightMap[id.xy] - _WaterHeight, 0);
}


[numthreads(8,8,1)]
void Update(uint2 id : SV_DispatchThreadID)
{
    float ht1 = _HeightTexture1[id.xy];
    float ht2 = _HeightTexture2[id.xy];
    if(id.x < 2)
    {
        _HeightTexture2[uint2(id.x - 1, id.y)] = ht2;
    }
    if(id.x > 1021)
    {
        _HeightTexture2[uint2(id.x + 1, id.y)] = ht2;
    }
    if(id.y < 2)
    {
        _HeightTexture2[uint2(id.x, id.y - 1)] = ht2;
    }
    if(id.y > 1021)
    {
        _HeightTexture2[uint2(id.x, id.y + 1)] = ht2;
    }

    int xDir[4] = {-1, 1, 0, 0};
    int yDir[4] = {0, 0, -1, 1};
    float hnt2 = 0;
    for(int i = 0; i < 4; ++i)
    {
        hnt2 += _HeightTexture2[uint2(id.x + xDir[i], id.y + yDir[i])];
    }
    _HeightTexture[id.xy] = _Damping * (ht2 + _Beta * (ht2 - ht1) + _Alpha * (hnt2 - 4 * ht2));
}