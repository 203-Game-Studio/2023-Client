#pragma kernel GrassCulling

uint instanceCount;
uint depthTextureSize;
Texture2D hizTexture;
StructuredBuffer<float4x4> localToWorldMatrixBuffer;
AppendStructuredBuffer<float4x4> cullResult;
float4x4 vpMatrix;

//TODO: 草碰撞盒，现在草默认是(0.5,0.5,0.5)大小，后续应该改成传进来
static float3 boundMin = float3(-0.25, 0, -0.25);
static float3 boundMax = float3(0.25, 0.5, 0.25);

bool IsInClipSpace(float4 positionCS)
{
    return positionCS.x > -positionCS.w && positionCS.x < positionCS.w &&
        positionCS.y > -positionCS.w && positionCS.y < positionCS.w &&
        positionCS.z > 0 && positionCS.z < positionCS.w;
}

[numthreads(640, 1, 1)]
void GrassCulling(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= instanceCount)
        return;
    float4x4 mMatrix = localToWorldMatrixBuffer[id.x];
    float4x4 mvpMatrix = mul(vpMatrix, mMatrix);

    float4 boundVerts[8];
    boundVerts[0] = float4(boundMin, 1);
    boundVerts[1] = float4(boundMax, 1);
    boundVerts[2] = float4(boundMax.x, boundMax.y, boundMin.z, 1);
    boundVerts[3] = float4(boundMax.x, boundMin.y, boundMax.z, 1);
    boundVerts[4] = float4(boundMax.x, boundMin.y, boundMin.z, 1);
    boundVerts[5] = float4(boundMin.x, boundMax.y, boundMax.z, 1);
    boundVerts[6] = float4(boundMin.x, boundMax.y, boundMin.z, 1);
    boundVerts[7] = float4(boundMin.x, boundMin.y, boundMax.z, 1);

    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;
    //视椎剔除
    bool isInClipSpace = false;
    for (int i = 0; i < 8; i++)
    {
        float4 positionCS = mul(mvpMatrix, boundVerts[i]);
        if (!isInClipSpace && IsInClipSpace(positionCS))
            isInClipSpace = true;

        //ndc的AABB
        float3 ndc = positionCS.xyz / positionCS.w;
        if (minX > ndc.x) minX = ndc.x;
        if (minY > ndc.y) minY = ndc.y;
        if (minZ > ndc.z) minZ = ndc.z;
        if (maxX < ndc.x) maxX = ndc.x;
        if (maxY < ndc.y) maxY = ndc.y;
        if (maxZ < ndc.z) maxZ = ndc.z;
    }
    if (!isInClipSpace)
        return;

    //hiz遮挡剔除
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    float depth = maxZ;

    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * depthTextureSize), 0, log2(depthTextureSize) - 4);
    uint size = depthTextureSize / (1 << mipmapLevel);

    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));
    
    float depthInTexture = hizTexture.mips[mipmapLevel][pixelLeftBottom].r;
    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) {
        depthInTexture = min(min(depthInTexture, hizTexture.mips[mipmapLevel][pixelRightTop].r),
            min(hizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, 
            hizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = min(depthInTexture, hizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = min(depthInTexture, hizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture > depth)
        return;

    cullResult.Append(mMatrix);
}