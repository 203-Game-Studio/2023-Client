#pragma kernel ClusterCulling
#pragma kernel TriangleCulling
#pragma kernel ShadowCulling

#include "GPUDrivenDef.hlsl"

StructuredBuffer<InstanceData> _InstanceDataBuffer;
StructuredBuffer<Meshlet> _MeshletBuffer;
AppendStructuredBuffer<Meshlet> _ClusterResult;
uniform float4x4 _VPMatrix;
uniform float3 _CameraPos;
uniform int _MeshletCount;
uint depthTextureSize;
Texture2D _HizTexture;

bool IsInClipSpace(float4 positionCS)
{
    return positionCS.x > -positionCS.w && positionCS.x < positionCS.w &&
        positionCS.y > -positionCS.w && positionCS.y < positionCS.w &&
        positionCS.z > 0 && positionCS.z < positionCS.w;
}
#pragma enable_d3d11_debug_symbols
[numthreads(64, 1, 1)]
void ClusterCulling(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _MeshletCount)
        return;
    Meshlet meshlet = _MeshletBuffer[id.x];
    float4x4 mMatrix = _InstanceDataBuffer[0].objectToWorldMatrix;

    //背面剔除
    float4 posWS =  mul(mMatrix, float4(meshlet.coneApex, 1));
    if(dot(normalize(posWS.xyz - _CameraPos), meshlet.coneAxis) >= meshlet.coneCutoff)
        return;

    //视椎剔除
    float4x4 mvpMatrix = mul(_VPMatrix, mMatrix);
    float4 boundVerts[8];
    boundVerts[0] = float4(meshlet.min, 1);
    boundVerts[1] = float4(meshlet.max, 1);
    boundVerts[2] = float4(meshlet.max.x, meshlet.max.y, meshlet.min.z, 1);
    boundVerts[3] = float4(meshlet.max.x, meshlet.min.y, meshlet.max.z, 1);
    boundVerts[4] = float4(meshlet.max.x, meshlet.min.y, meshlet.min.z, 1);
    boundVerts[5] = float4(meshlet.min.x, meshlet.max.y, meshlet.max.z, 1);
    boundVerts[6] = float4(meshlet.min.x, meshlet.max.y, meshlet.min.z, 1);
    boundVerts[7] = float4(meshlet.min.x, meshlet.min.y, meshlet.max.z, 1);

    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;
    bool isInClipSpace = false;
    for (int i = 0; i < 8; i++)
    {
        float4 positionCS = mul(mvpMatrix, boundVerts[i]);
        if (!isInClipSpace && IsInClipSpace(positionCS))
            isInClipSpace = true;

        //ndc的AABB
        float3 ndc = positionCS.xyz / positionCS.w;
        if (minX > ndc.x) minX = ndc.x;
        if (minY > ndc.y) minY = ndc.y;
        if (minZ > ndc.z) minZ = ndc.z;
        if (maxX < ndc.x) maxX = ndc.x;
        if (maxY < ndc.y) maxY = ndc.y;
        if (maxZ < ndc.z) maxZ = ndc.z;
    }
    if (!isInClipSpace)
        return;

    //hiz遮挡剔除
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    float depth = maxZ;

    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * depthTextureSize), 0, log2(depthTextureSize) - 4);
    uint size = depthTextureSize / (1 << mipmapLevel);

    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));
    
    float depthInTexture = _HizTexture.mips[mipmapLevel][pixelLeftBottom].r;
    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) {
        depthInTexture = min(min(depthInTexture, _HizTexture.mips[mipmapLevel][pixelRightTop].r),
            min(_HizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, 
            _HizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = min(depthInTexture, _HizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = min(depthInTexture, _HizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture > depth)
        return;

    _ClusterResult.Append(meshlet);
}

AppendStructuredBuffer<uint2> _TriangleResult;
StructuredBuffer<float3> _VerticesBuffer;
StructuredBuffer<uint> _MeshletVerticesBuffer;
StructuredBuffer<uint> _MeshletTrianglesBuffer;
StructuredBuffer<Meshlet> _ClusterCullingResult;
#pragma enable_d3d11_debug_symbols
[numthreads(64, 1, 1)]
void TriangleCulling(uint3 id : SV_DispatchThreadID)
{
    Meshlet meshlet = _ClusterCullingResult[id.y];
    float4x4 mMatrix = _InstanceDataBuffer[0].objectToWorldMatrix;

    uint startIdx = meshlet.triangleOffset + id.x * 3;
    uint triIdx1 = _MeshletTrianglesBuffer[startIdx];
    uint triIdx2 = _MeshletTrianglesBuffer[startIdx+1];
    uint triIdx3 = _MeshletTrianglesBuffer[startIdx+2];

    float3 vert1 = _VerticesBuffer[_MeshletVerticesBuffer[meshlet.vertexOffset + triIdx1]];
    float3 vert2 = _VerticesBuffer[_MeshletVerticesBuffer[meshlet.vertexOffset + triIdx2]];
    float3 vert3 = _VerticesBuffer[_MeshletVerticesBuffer[meshlet.vertexOffset + triIdx3]];

    float3 minVertex;
    float3 maxVertex;
    minVertex.x = min(min(vert1.x, vert2.x), vert3.x);
    minVertex.y = min(min(vert1.y, vert2.y), vert3.y);
    minVertex.z = min(min(vert1.z, vert2.z), vert3.z);
    maxVertex.x = max(max(vert1.x, vert2.x), vert3.x);
    maxVertex.y = max(max(vert1.y, vert2.y), vert3.y);
    maxVertex.z = max(max(vert1.z, vert2.z), vert3.z);
    //视椎剔除
    float4 boundVerts[8];
    float4x4 mvpMatrix = mul(_VPMatrix, mMatrix);
    boundVerts[0] = float4(minVertex, 1);
    boundVerts[1] = float4(maxVertex, 1);
    boundVerts[2] = float4(maxVertex.x, maxVertex.y, minVertex.z, 1);
    boundVerts[3] = float4(maxVertex.x, minVertex.y, maxVertex.z, 1);
    boundVerts[4] = float4(maxVertex.x, minVertex.y, minVertex.z, 1);
    boundVerts[5] = float4(minVertex.x, maxVertex.y, maxVertex.z, 1);
    boundVerts[6] = float4(minVertex.x, maxVertex.y, minVertex.z, 1);
    boundVerts[7] = float4(minVertex.x, minVertex.y, maxVertex.z, 1);

    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;
    bool isInClipSpace = false;
    for (int i = 0; i < 8; i++)
    {
        float4 positionCS = mul(mvpMatrix, boundVerts[i]);
        if (!isInClipSpace && IsInClipSpace(positionCS))
            isInClipSpace = true;

        //ndc的AABB
        float3 ndc = positionCS.xyz / positionCS.w;
        if (minX > ndc.x) minX = ndc.x;
        if (minY > ndc.y) minY = ndc.y;
        if (minZ > ndc.z) minZ = ndc.z;
        if (maxX < ndc.x) maxX = ndc.x;
        if (maxY < ndc.y) maxY = ndc.y;
        if (maxZ < ndc.z) maxZ = ndc.z;
    }
    if (!isInClipSpace)
        return;

    //hiz遮挡剔除
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    float depth = maxZ;

    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * depthTextureSize), 0, log2(depthTextureSize) - 4);
    uint size = depthTextureSize / (1 << mipmapLevel);

    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));
    
    float depthInTexture = _HizTexture.mips[mipmapLevel][pixelLeftBottom].r;
    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) {
        depthInTexture = min(min(depthInTexture, _HizTexture.mips[mipmapLevel][pixelRightTop].r),
            min(_HizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, 
            _HizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = min(depthInTexture, _HizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = min(depthInTexture, _HizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture > depth)
        return;

    _TriangleResult.Append(id.xy);
}

AppendStructuredBuffer<Meshlet> _ShadowResult0;
AppendStructuredBuffer<Meshlet> _ShadowResult1;
AppendStructuredBuffer<Meshlet> _ShadowResult2;
half4 _CullSpheres[3];
half4 _StandFrustumVertices[8];

half3 CalculatePlaneNormal(FrustumFace face)
{
    half3 edge1 = face.vertices[1] - face.vertices[0];
    half3 edge2 = face.vertices[2] - face.vertices[0];
    return normalize(cross(edge1, edge2));
}

half SignedDistanceToPoint(half3 pos, half3 planePoint, half3 planeNormal)
{
    return dot(pos - planePoint, planeNormal);
}

uint PointInPolygon(FrustumFace face, half3 pos)
{
    half3 A = face.vertices[0];
    half3 B = face.vertices[1];
    half3 C = face.vertices[2];
    half3 D = face.vertices[3];
    half3 AB = A - B;
    half3 AP = A - pos;
    half3 CD = C - D;
    half3 CP = C - pos;

    half3 DA = D - A;
    half3 DP = D - pos;
    half3 BC = B - C;
    half3 BP = B - pos;

    uint isBetweenAB_CD = (sign(dot(cross(AB, AP), cross(CD, CP))) + 1) * 0.5;
    uint isBetweenDA_BC = (sign(dot(cross(DA, DP), cross(BC, BP))) + 1) * 0.5;
    return isBetweenAB_CD & isBetweenDA_BC;
}

uint CheckLinePlaneIntersection(FrustumFace face, half3 linePointA, half3 linePointB, out half3 intersectionPoint)
{
    half3 planeNormal = CalculatePlaneNormal(face);
    half distanceA = SignedDistanceToPoint(linePointA, face.vertices[0], planeNormal);
    half distanceB = SignedDistanceToPoint(linePointB, face.vertices[0], planeNormal);

    //if(abs(distanceA) < abs(distanceB))
    if (distanceA * distanceB >= 0)
    {
        return 0; 
    }

    intersectionPoint = linePointA + distanceA * (linePointB - linePointA) / (distanceA - distanceB);

    return PointInPolygon(face, intersectionPoint);
}

half angle(half3 a, half3 b)
{
    half dotProduct = dot(normalize(a), normalize(b));
    half angle = acos(dotProduct) * (180.0 / 3.1415926);
    return angle;
}

static const half3 axisMuti[8] =
{
    half3(1, 1, 1),
    half3(1, 1, -1),
    half3(1, -1, 1),
    half3(1, -1, -1),
    half3(-1, 1, 1),
    half3(-1, 1, -1),
    half3(-1, -1, 1),
    half3(-1, -1, -1)
};

half3 GetShadowDirectionLine(half3 topPoint, half frustumMinY, half3 lightDirection)
{
    half3 bottomPoint = half3(topPoint.x, frustumMinY, topPoint.z);

    half ther = angle(lightDirection, half3(0, 1, 0));
    half shadowLen = abs(tan(ther * deg2Rad)) * (topPoint.y - bottomPoint.y);

    lightDirection.y = 0;
    half3 forward = (lightDirection * shadowLen + bottomPoint) - bottomPoint;

    half3 shadowEndPoint = normalize(forward) * shadowLen + bottomPoint;
    return shadowEndPoint;
}

ShadowLine8 Calculate8ShadowLine(half3 center, half3 extents, half3 lightDirection, half frustumMinY)
{
    half minY = center.y - extents.y;
    frustumMinY = min(frustumMinY, minY);

    ShadowLine8 shadowLine8;

    [unroll]
    for (uint i = 0; i < 8; i++)
    {
        shadowLine8.shadowLine[i].vertices[0] = center + half3(extents.x * axisMuti[i].x, extents.y * axisMuti[i].y, extents.z * axisMuti[i].z);
        shadowLine8.shadowLine[i].vertices[1] = GetShadowDirectionLine(shadowLine8.shadowLine[i].vertices[0], frustumMinY, lightDirection);
    }
    return shadowLine8;
}

FrustumFace CalculateMidPlane(half4 frustumVertices[8], half farClipPlane, half lenght, half ShadowLenght)
{
    FrustumFace midPlane;

    half scale = ShadowLenght / farClipPlane;
    half t = lenght / ShadowLenght * scale;

    [unroll]
    for (uint i = 0; i < 4; i++)
    {
        midPlane.vertices[i] = lerp(frustumVertices[i].xyz, frustumVertices[i + 4].xyz, t);
    }

    return midPlane;
}

Frustum6Face GetFrustum6Face(half3 frustumVertices[8])
{
    // near
     half3 nearPlaneVertices[4] = {
        frustumVertices[0],
        frustumVertices[1],
        frustumVertices[2],
        frustumVertices[3]
    };

    // far
    half3 farPlaneVertices[4] = {
        frustumVertices[4],
        frustumVertices[5],
        frustumVertices[6],
        frustumVertices[7]
    };

    // left
    half3 leftPlaneVertices[4] = {
        frustumVertices[0],
        frustumVertices[1],
        frustumVertices[5],
        frustumVertices[4]
    };

    // right
    half3 rightPlaneVertices[4] = {
        frustumVertices[3],
        frustumVertices[2],
        frustumVertices[6],
        frustumVertices[7]
    };

    // top
    half3 topPlaneVertices[4] = {
        frustumVertices[1],
        frustumVertices[2],
        frustumVertices[6],
        frustumVertices[5]
    };

    // down
    half3 bottomPlaneVertices[4] = {
        frustumVertices[0],
        frustumVertices[3],
        frustumVertices[7],
        frustumVertices[4]
    };
    Frustum6Face frustum6Face;
    frustum6Face.frustumFace[0] = nearPlaneVertices;
    frustum6Face.frustumFace[1] = farPlaneVertices;
    frustum6Face.frustumFace[2] = leftPlaneVertices;
    frustum6Face.frustumFace[3] = rightPlaneVertices;
    frustum6Face.frustumFace[4] = topPlaneVertices;
    frustum6Face.frustumFace[5] = bottomPlaneVertices;
    return frustum6Face;
}

 half2 CalculateIntersectStatus(half3 startPoint, half3 endPoint, half3 intersectionPoint, half4 cullSphere)
{
    half2 inAndOut0 = 0;
    half3 sphereCenter = half3(cullSphere.x, cullSphere.y, cullSphere.z);
    half sphereRadius = cullSphere.w;

    half3 start_sphereCenter = startPoint - sphereCenter;
    half3 sToe = normalize(startPoint - endPoint);
    half toCenterDis = dot(start_sphereCenter, sToe);
    half xiebian1 = distance(startPoint, sphereCenter);
    half toLineDis = sqrt(xiebian1 * xiebian1 - toCenterDis * toCenterDis);
    uint lineIntersect = sphereRadius > toLineDis ? 1 : 0;

    bool xiebian1Inside = xiebian1 <= sphereRadius;
    bool xiebian2Inside = distance(endPoint, sphereCenter) <= sphereRadius;
    
    inAndOut0.x = (xiebian1Inside ? 1 : 0) | (xiebian2Inside ? 1 : 0);

    half3 closestPoint = startPoint + sToe * -toCenterDis;
    half3 pa = startPoint - closestPoint;
    half3 pb = endPoint - closestPoint;

    inAndOut0.x += dot(pa, pb) < 0 ? 1 : 0;
    inAndOut0.x *= lineIntersect;

    half dis = distance(sphereCenter, intersectionPoint);
    inAndOut0.y = sphereRadius > dis ? 0 : 1;
    return inAndOut0;
}

uint CalculateBoundShadowIntersect(ShadowLine8 shadowLine8, Frustum6Face frustum6Face, half4 cullSpheres[3], out half2 intersectResult[3])
{
    uint isIntersecting = 0;

    half2 inAndOut0 = 0;
    half2 inAndOut1 = 0;
    half2 inAndOut2 = 0;
    [unroll]
    for (uint i = 0; i < 8; i++)
    {
        half3 startPoint = shadowLine8.shadowLine[i].vertices[0]; 
        half3 endPoint = shadowLine8.shadowLine[i].vertices[1];
        [unroll]
        for (uint j = 0; j < 6; j++)
        {
            half3 intersectionPoint;
            uint isIntersect = CheckLinePlaneIntersection(frustum6Face.frustumFace[j], startPoint, endPoint, intersectionPoint);

            if (isIntersect == 0)
            {
                continue;
            }
           isIntersecting |= isIntersect;


           inAndOut0 += CalculateIntersectStatus(startPoint, endPoint, intersectionPoint, cullSpheres[0]);

           inAndOut1 += CalculateIntersectStatus(startPoint, endPoint, intersectionPoint, cullSpheres[1]);

           inAndOut2 += CalculateIntersectStatus(startPoint, endPoint, intersectionPoint, cullSpheres[2]);
        }
    }

    intersectResult[0] = inAndOut0;
    intersectResult[1] = inAndOut1;
    intersectResult[2] = inAndOut2;
    return isIntersecting;
}

#pragma enable_d3d11_debug_symbols
[numthreads(64, 1, 1)]
void ShadowCulling(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _MeshletCount)
        return;

    Meshlet meshlet = _MeshletBuffer[id.x];
    float4x4 mMatrix = _InstanceDataBuffer[0].objectToWorldMatrix;

    half3 lightDirection = half3(_StandFrustumVertices[5].w, _StandFrustumVertices[6].w, _StandFrustumVertices[7].w);
    //背面剔除
    float4 posWS =  mul(mMatrix, float4(meshlet.coneApex, 1));
    if(dot(normalize(lightDirection), meshlet.coneAxis) >= meshlet.coneCutoff)
        return;

    //csm视椎体剔除
    half3 frustumVertices[8];
    half frustumMinY = _StandFrustumVertices[0].y;
    [unroll]
    for (uint i = 0; i < 8; i++)
    {
        half3 vertex = _StandFrustumVertices[i].xyz;
        frustumMinY = min(frustumMinY, vertex.y);
        frustumVertices[i] = vertex;
    }

    half csm0Distance = _StandFrustumVertices[0].w;
    half csm1Distance = _StandFrustumVertices[1].w;
    half csm2Distance = _StandFrustumVertices[2].w;
    half farClipPlane = _StandFrustumVertices[3].w;
    uint csmCount = _StandFrustumVertices[4].w;
    uint csmEndDistance = _StandFrustumVertices[csmCount - 1].w;

    half3 min = mul(mMatrix, meshlet.min);
    half3 max = mul(mMatrix, meshlet.max);
    half3 center = (min + max) * 0.5;
    half3 extends = center - min;

    ShadowLine8 shadowLine8 = Calculate8ShadowLine(center, extends, lightDirection, frustumMinY);
    Frustum6Face frustum6Face = GetFrustum6Face(frustumVertices);

    half2 intersectResult[3];
    bool isIntersecting = CalculateBoundShadowIntersect(shadowLine8, frustum6Face, _CullSpheres, intersectResult);
    if (!isIntersecting)
    {
        return;
    }

    half2 inAndOut0 = intersectResult[0];
    half2 inAndOut1 = intersectResult[1];
    half2 inAndOut2 = intersectResult[2];

    if (inAndOut0.x > 0)
    {
        _ShadowResult0.Append(meshlet);
    }

    if (inAndOut0.y * inAndOut1.x > 0)
    {
        _ShadowResult1.Append(meshlet);
    }

    if (inAndOut1.y * inAndOut2.x > 0)
    {
        _ShadowResult2.Append(meshlet);
    }
}